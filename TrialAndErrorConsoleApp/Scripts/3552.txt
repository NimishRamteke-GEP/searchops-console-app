{
        "source": "def renameFields(def doc, String field, String newField)\r\n  {\r\n    String log = \"\";\r\n    log = log + \" |1| Inside renameField function, old field: \"+ field + \" and new field \" + newField;\r\n    String[] fieldTokens = field.splitOnToken(\".\");\r\n    String[] newFieldTokens = newField.splitOnToken(\".\");\r\n    for (int i = 0; i < fieldTokens.length; i++) \r\n\t\t{\r\n\t\t  String currentField = fieldTokens[i];\r\n\t\t  log = log + \" |2| Inside for loop for field: \" + currentField + \" i: \" + i + \" fieldTokens length: \" + fieldTokens.length ;\r\n\t\t  if (i == fieldTokens.length - 1) \r\n      {\r\n        log = log + \" |3| field token -1 condition for field: \" + currentField;\r\n        String f = fieldTokens[fieldTokens.length - 1];\r\n        log = log + \" |4| doc is\" +  \"field is \"+ f ;\r\n        if (doc[f] != null) \r\n        {\r\n          log = log + \" |5| field is present in the document for field: \" + currentField;\r\n          def value = doc[currentField];\r\n          doc[newFieldTokens[newFieldTokens.length - 1]] = value;\r\n          doc.remove(currentField);\r\n          return log;\r\n        }\r\n      }\r\n      else\r\n      {\r\n        def nestedObject = doc[currentField];\r\n        if (nestedObject == null) \r\n        {\r\n          log = log + \" |6| Returnning as nested object is null for field: \" + currentField;\r\n          return log;\r\n        }\r\n        String fieldTokens1 =fieldTokens[i+1];  \r\n        int k = 2;\r\n        int counter = i;\r\n        String newfieldTokens1 = newFieldTokens[i+1];\r\n        counter++;\r\n        while(counter < fieldTokens.length -1 )\r\n        {\r\n          fieldTokens1 = fieldTokens1 + \".\" +  fieldTokens[counter+1];\r\n          newfieldTokens1 = newfieldTokens1 + \".\" +  newFieldTokens[counter+1];\r\n          counter++;\r\n        }\r\n        log = log + \" |7| fieldTokens1 are: \" + fieldTokens1 +  \" newfieldTokens1 are: \" + newfieldTokens1;\r\n        if (nestedObject instanceof List) \r\n        {\r\n         log = log + \" |8| Inside if condition as current obj is nested type for field: \" + currentField;\r\n          for (int j = 0; j < nestedObject.length; j++) \r\n          {\r\n            log = log + renameFields(nestedObject[j], fieldTokens1, newfieldTokens1);\r\n          }\r\n          return log;\r\n        }\r\n        if (nestedObject instanceof Map) \r\n        {\r\n          log = log + \" |9| Inside if condition as current obj is map type for field: \" + currentField;\r\n          log = log + renameFields(nestedObject, fieldTokens1, newfieldTokens1);\r\n           return log;\r\n        }\r\n      }\r\n\t\t}\r\n    return log;\r\n  }\r\n  String renameLog = \"\";\r\n  String log = \"\";\r\n  for (int i = 0; i < params.renames.size() ; i++ ) \r\n  {\r\n    def doc = ctx._source;\r\n    log = log + \"| INFO: Script started\" + i;\r\n    renameLog = renameLog + renameFields(doc, params.renames[i].oldField.toString(),  params.renames[i].newField.toString());\r\n  }\r\n  //ctx._source[\"log\"] = log;\r\n  //ctx._source[\"renameLog\"] = renameLog;\r\n  ",
        "params": {
            "renames": [
               { "oldField": "obj$documentrules.arr$suppliers", "newField": "obj$documentrules.nst$suppliers" },
                { "oldField": "obj$documentrules.arr$documenttimelines", "newField": "obj$documentrules.nst$documenttimelines" }
         
            ]
        }
    }