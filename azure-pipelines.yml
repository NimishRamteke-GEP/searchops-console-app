# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

# steps:

# - powershell: |
#     function Logstash_Mapping{ Param ([Parameter(Mandatory = $true)][string]$deploymentrecordcount)
#       Write-Output ("##vso[task.setvariable variable=deploymentrecordcount;isOutput=true]$deploymentrecordcount")
#       echo "deploymentrecordcount: $deploymentrecordcount";
#       Write-Host "Set deploymentrecordcount to $deploymentrecordcount"
#     }
#     Logstash_Mapping -deploymentrecordcount 10

#   displayName: 'Set Deployment Record Count'
#   name: setvarStep

# - powershell: |
#     Write-Host "Reading environment variable deploymentrecordcount..."
#     if ($env:deploymentrecordcount) {
#         Write-Host "Deployment Record Count in subsequent task: $env:deploymentrecordcount"
#     } else {
#         Write-Host "Environment variable deploymentrecordcount is not set"
#     }
#     echo "before printing"
#     echo "Count is: $deploymentrecordcount"
#     echo "Count varuable is: $setvarStep"
#     echo "env is $env"
#     echo "after printing"
#   displayName: 'Use Deployment Record Count'

steps:

- powershell: |
    function Logstash_Mapping{ Param ([Parameter(Mandatory = $true)][string]$deploymentrecordcount)
      #Write-Output ("##vso[task.setvariable variable=deploymentrecordcount;isOutput=true]$deploymentrecordcount")
      Write-Host ("##vso[task.setvariable variable=deploymentrecordcount;isOutput=true]$deploymentrecordcount")
      echo "deploymentrecordcount: $deploymentrecordcount";
      Write-Host "Set deploymentrecordcount to $deploymentrecordcount"
    }
    Logstash_Mapping -deploymentrecordcount 30
  name: countVar
  displayName: 'Set Deployment Record Count'
  

- powershell: |
    echo " In 2nd script";
    echo $(countVar.deploymentrecordcount)
    echo "value: $(countVar.deploymentrecordcount)"
    # Write-Host "Reading environment variable deploymentrecordcount..."
    # if ($env:deploymentrecordcount) {
    #     Write-Host "Deployment Record Count in subsequent task: $env:deploymentrecordcount"
    # } else {
    #     Write-Host "Environment variable deploymentrecordcount is not set"
    # }
    # echo "before printing"
    # echo "Count is: $deploymentrecordcount"
    # echo "Count varuable is: $setvarStep"
    # echo "env is $env"
    # echo "after printing"
  displayName: 'Use Deployment Record Count'

# - task: PowerShell@2
#   name: 'SetVal2'
#   inputs:
#     targetType: 'inline'
#     script: |
#       $setvalue = "111"
#       Write-Host "##vso[task.setvariable variable=setvalue;isOutput=true]$setvalue"

# - task: PowerShell@2
#   name: 'UseVal2' 
#   inputs:
#     targetType: 'inline'
#     script: 'Write-Host The value of setvalue is $(SetVal2.setvalue)'
